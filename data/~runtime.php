<?php defined('SP') or exit();function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)) return isset($_lang[$name]) ? $_lang[$name] : $name; $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function G($name=null, $value=null) { static $_config = array(); if (empty($name)) { return $_config; } if (is_string($name)) { $name = strtoupper($name); if (!strpos($name, '.')) { $name = strtolower($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : null; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtolower($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : null; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)) { $_config = array_merge($_config, array_change_key_case($name)); return; } return null; } function I($name, $default='', $filter=null) { if(strpos($name,'.')) { list($method, $name) = explode('.',$name,2); }else{ $method = 'R'; } switch(strtolower($method)) { case 'g' : $input =& $_GET;break; case 'p' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php://input'), $input);break; case 'r' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST;break; case 'PUT': parse_str(file_get_contents('php://input'), $input);break; default:$input = $_GET; } break; case 's' : $input =& $_SESSION; break; case 'c' : $input =& $_COOKIE; break; default:return NULL; } if(''==$name) { $data = $input; array_walk_recursive($data, 'filter_exp'); $filters = isset($filter) ? $filter : G('DEF_FILTER'); if($filters) { $filters = explode(',', $filters); foreach($filters as $filter){ $data = array_map_recursive($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; is_array($data) && array_walk_recursive($data,'filter_exp'); $filters = isset($filter) ? $filter : G('DEF_FILTER'); if($filters) { if(is_string($filters)){ $filters = explode(',',$filters); }elseif(is_int($filters)){ $filters = array($filters); } foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data) ? array_map_recursive($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) return isset($default) ? $default : NULL; } } } }else{ $data = isset($default) ? $default : NULL; } return $data; } function array_map_recursive($filter, $data) { $result = array(); foreach ($data as $key => $val) { $result[$key] = is_array($val) ? array_map_recursive($filter, $val) : call_user_func($filter, $val); } return $result; } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))) $value .= ' '; } function require_cache($file) { static $_files = array(); if (!isset($_files[$file])) { if (is_file($file)) { require $file; $_files[$file] = true; } else { $_files[$file] = false; } } return $_files[$file]; } function route($route, $e=array(), $a=false) { static $_r = array(); $route = trim($route, '/'); if(!isset($_r[$route.$e[0]])) { $p = preg_match("#^(?:(SP|AP|ROOT)\.)?([a-z_][a-z0-9_\./]*/|)([a-z0-9_]+)(?:\.([a-z_][a-z0-9_]*))?(?:/|\$)#sim", $route, $m); if($p) { if(empty($m[1])) $m[1] = 'SP'; $path = $m[2] . $m[3]; if(empty($m[4])) $m[4] = $e[2] ? $e[2] : 'run'; $m[3] = $e[0].$m[3]; $m[4] = $e[1].$m[4]; if($a && is_string($a)) $file = AP.'vip/'.$a.DS.$path.EXT; else $file = constant($m['1']).$path.EXT; if($a) { $refile = require_cache($file); if(empty($refile)) $refile = require_cache(AP.$path.EXT); } $_r[$route.$e[0]] = array('file'=>$refile, 'path'=>$m[2], 'class'=>$m[3], 'func'=>$m[4]); return $_r[$route.$e[0]]; } trigger_error("route: [$route] is invalid", E_USER_ERROR); } return $_r[$route.$e[0]]; } function A($route, $a=true) { $route = 'AP.controller/'.$route; $r = route($route, array('c_','a_','do') ,$a); if(class_exists($r['class'])) { $m = new $r['class'](); if (method_exists($m, $r['func'])) { $before = G('HOOK_H').$r['func']; if (G('HOOK_ACTION') && method_exists($m, $before)) { $m->$before(); } if($r['func'] != $r['class']) $m->$r['func'](); $after = G('HOOK_F').$r['func']; if (G('HOOK_ACTION') && method_exists($m, $after)) { $m->$after(); } } else err404(); } else err404(); } function err404() { header('HTTP/1.1 404 Not Found'); $view = C('view', true)->display('error/404'); } function S($route, $e=array(), $p=array()) { static $_cls = array(); $route = trim($route); if (isset($_cls[$route.$e[0]]) && is_object($_cls[$route.$e[0]])) { return $_cls[$route.$e[0]]; } else { $r = route($route, $e, true); $class = $r['class']; if(!class_exists($class)) { trigger_error('class ['.$r['class'].'] is not exists', E_USER_ERROR); } $_cls[$route.$e[0]] = new $class($p); return $_cls[$route.$e[0]]; } } function C($route, $p=array()) { $route = 'SP.core/'.$route; return S($route, array('core_'), $p); } function H($route, $p=array()) { $route = 'SP.library/'.$route; return S($route, array(), $p); } function D($route, $p=array()) { static $_model = array(); if(isset($_model[$route])) return $_model[$route]; if(empty($_model)) require(ROOT.'data/~model.php'); $r = route('AP.model/'.$route, array('model_'), true); $class = $r['class']; if(!class_exists($class)) { $_model[$route] = new model($p, $route); } else { $_model[$route] = new $class($p); } return $_model[$route]; } function template($route) { $view = C('view'); $view->template($route); return $view->getcache($route); } function db_create_in($item_list, $field_name = '') { if (empty($item_list)) { return $field_name . " IN ('') "; } else { if (!is_array($item_list)) { $item_list = explode(',', $item_list); } $item_list = array_unique($item_list); $item_list_tmp = ''; foreach ($item_list AS $item) { if ($item !== '') { $item_list_tmp .= $item_list_tmp ? ",'$item'" : "'$item'"; } } if (empty($item_list_tmp)) { return $field_name . " IN ('') "; } else { return $field_name . ' IN (' . $item_list_tmp . ') '; } } } function admin_priv($priv_str, $msg_type = '' , $msg_output = true){ if ($_SESSION['admin']['action_list'] == 'all') { return true; } if (strpos(',' . $_SESSION['admin']['action_list'] . ',', ',' . $priv_str . ',') === false) { $link[] = array('text' => "返回上一页", 'href' => 'javascript:history.back(-1)'); if ( $msg_output) { sys_msg("对不起，您没有此操作的权限！", 0, $link); die(); } return false; } else { return true; } } function admin_priv_json($priv_str, $msg_type = '' , $msg_output = true){ if ($_SESSION['admin']['action_list'] == 'all') { return true; } if (strpos(',' . $_SESSION['admin']['action_list'] . ',', ',' . $priv_str . ',') === false) { die(json_encode(array('ret'=>'3','content'=>"暂无权限"))); } else { return true; } } function sys_msg($msg_detail, $msg_type = 0, $links = array(), $auto_redirect = true) { if (count($links) == 0) { $links[0]['text'] = "返回上一页"; $links[0]['href'] = 'javascript:history.go(-1)'; } $view = C('view',true); $view->assign('ur_here', "系统信息"); $view->assign('msg_detail', $msg_detail); $view->assign('msg_type', $msg_type); $view->assign('links', $links); $view->assign('default_url', $links[0]['href']); $view->assign('auto_redirect', $auto_redirect); $view->display('message/sys_msg'); exit; }function getip() { $clientIp = ""; if (isset ($_SERVER)) { if (isset ($_SERVER["HTTP_X_FORWARDED_FOR"])) { $clientIp = $_SERVER["HTTP_X_FORWARDED_FOR"]; } elseif (isset ($_SERVER["HTTP_CLIENT_IP"])) { $clientIp = $_SERVER["HTTP_CLIENT_IP"]; } else { $clientIp = $_SERVER["REMOTE_ADDR"]; } } return $clientIp; } function rand_uniqid($num = '8') { $in = time(); $passKey = rand(0, $in); $index = "abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"; if($passKey !== null) { for($n=0;$n<strlen($index);$n++) $i[] = substr($index,$n,1); $passhash = hash('sha256',$passKey); $passhash = (strlen($passhash) < strlen($index)) ? hash('sha512',$passKey) : $passhash; for($n=0;$n<strlen($index);$n++) $p[] = substr($passhash, $n ,1); array_multisort($p, SORT_DESC, $i); $index = implode($i); } $base = strlen($index); if (is_numeric($num)) { $num--; if ($num > 0) $in += pow($base, $num); } $out = ""; $t = floor(log($in, $base)); for ($t = floor(log($in, $base)); $t >= 0; $t--) { $bcp = bcpow($base, $t); $a = floor($in / $bcp) % $base; $out = $out . substr($index, $a, 1); $in = $in - ($a * $bcp); } $out = strrev($out); return strtolower($out); } function array_columns($arr,$col){ if($arr){ foreach($arr as $a){ $ar[] = $a[$col]; } } return $ar; } function dump() { $string = ''; foreach(func_get_args() as $value) { $string .= '<pre>' . htmlspecialchars($value === NULL ? 'NULL' : (is_scalar($value) ? $value : print_r($value, TRUE))) . "</pre>\n"; } return $string; } function tips($ret, $msg, $platform='mobile', $go='-1', $time=null) { $go = trim($go, '/'); $domain = 'http://'.$_SERVER['HTTP_HOST'].DS; if(strpos($go, "http://") !== false) { $to = $go; } elseif($go == '-1') { $to = empty($_SERVER['HTTP_REFERER']) ? $domain : $_SERVER['HTTP_REFERER']; } elseif($go == 'this') { $to = $domain._GCA_; } else { $to = $domain.$go; } if($ret && $platform=='mobile' && in_array($ret, array('suc', 'err', 'tip','msg'))) { $_SESSION['tips'][$to] = array('ret' => $ret, 'msg' => $msg, 'url' => $to); }elseif($ret && $platform=='pc' && in_array($ret, array('suc', 'err', 'tip','msg'))) { $_SESSION['pc_tips'][$to] = array('ret' => $ret, 'msg' => $msg, 'url' => $to); } if ($to) { header ('Location: '.$to); echo $meta = "<meta http-equiv=\"refresh\" content=\"{$time};url={$to}\" />"; exit; } } function togo($go='-1',$platform='mobile') { tips('togo', '', $platform, $go); } function suc($msg, $gourl='-1', $platform='mobile', $time=null) { tips('suc', $msg, $platform, $gourl, $time); } function err($msg, $gourl='-1', $platform='mobile', $time=null) { tips('err', $msg, $platform, $gourl, $time); } function tip($msg, $gourl='-1', $platform='mobile', $time=null) { tips('tip', $msg, $platform, $gourl, $time); } function string2array($data) { if ($data == '') return array(); if (is_array($data)) return $data; if (strpos($data, 'array') !== false && strpos($data, 'array') === 0) { @eval("\$array = $data;"); return $array; } return unserialize($data); } function array2string($data, $isformdata = 1) { if($data == '') return ''; if($isformdata) $data = new_stripslashes($data); return serialize($data); } function new_stripslashes($string) { if(!is_array($string)) return stripslashes($string); foreach($string as $key => $val) $string[$key] = new_stripslashes($val); return $string; }class core_dispatch { static public function run() { $varp = G('GET_PATHINFO'); $varg = G('GET_G'); $varc = G('GET_C'); $vara = G('GET_A'); if(isset($_GET[$varp])) { $_SERVER['PATH_INFO'] = $_GET[$varp]; unset($_GET[$varp]); } if(G('APP_SUB_DOMAIN_DEPLOY')) { $rules = G('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { $rule = $rules[$_SERVER['HTTP_HOST']]; } else { $sub = substr($_SERVER['HTTP_HOST'], 0, strpos($_SERVER['HTTP_HOST'], '.')); if($sub && isset($rules[$sub])) { if(G('APP_NETWORK') && G('APP_NETWORK_MODEL')=='SUBDOMAIN') { if(in_array($sub, G('APP_NETWORK_DOMAIN'))) $rule = $rules[$sub]; } else { $rule = $rules[$sub]; } }elseif(isset($rules['*'])) { if('www' != $sub && !in_array($sub, G('APP_SUB_DOMAIN_DENY'))) $rule = $rules['*']; } } if(!empty($rule)) { $r = self::route($rule[0]); if(!empty($r['g'])) {$_GET[$varg] = $r['g'];$dog = true;} if(!empty($r['c'])) {$_GET[$varc] = $r['c'];$doc = true;} if(!empty($r['a'])) {$_GET[$vara] = $r['a'];$doa = true;} if(isset($rule[1])) { parse_str($rule[1], $parms); $_GET = array_merge($_GET, $parms); } } } if(G('APP_NETWORK')) { if(G('APP_NETWORK_MODEL')=='SUBDOMAIN') { $sub = substr($_SERVER['HTTP_HOST'], 0, strpos($_SERVER['HTTP_HOST'], '.')); if('www'!=$sub && !in_array($sub, G('APP_NETWORK_DOMAIN'))) $partner = $sub; } else { $partner = trim($_GET[G('APP_NETWORK_MODEL')]); } define('_IM_', $partner); } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',', G('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1));break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $path = trim($_SERVER['PATH_INFO'], DS); if(0==strlen($path)) { $r = self::route(_DO_); } else { $r = self::route($path); } $p = explode('/', $r['g']); $var = array(); $group_deny = G('APP_GROUP_DENY'); if($group_deny && in_array($p[0], explode(',', $group_deny))) { exit; } empty($dog) && $var[$varg] = $r['g']; empty($doc) && $var[$varc] = $r['c']; empty($doa) && $var[$vara] = $r['a']; $_GET = array_merge($var, $_GET); if(!empty($rule) && $r['g']) $_G = $_GET['g'].DS.$r['g']; else $_G = !empty($rule) ? $_GET['g'] : (empty($path) ? $r['g'] : $_GET['g']); $_C = empty($path) ? $r['c'] : $_GET['c']; $_A = empty($path) ? $r['a'] : $_GET['a']; $_A = $_A ? $_A : 'do'; unset($_GET[$varg], $_GET[$varc], $_GET[$vara]); define('_G_', strip_tags($_G)); define('_C_', strip_tags($_C)); define('_A_', strip_tags($_A)); define('_GCA_', (_G_?_G_.DS:'')._C_.'.'._A_); $_REQUEST = array_merge($_POST, $_GET); return (_G_?_G_.DS:'')._C_.'.'._A_; } static public function route($route) { $p = preg_match("#^([a-z_][a-z0-9_\./]*/|)([a-z0-9_]+/?|)(?:\.([a-z_][a-z0-9_]*)?)?\$#sim", $route, $m); if($p) return array('g'=>trim($m[1], DS), 'c'=>$m[2], 'a'=>$m[3]); } }abstract class action { protected $view = null; protected $var = array(); public function __construct() { if(method_exists($this,'_init')) { $this->_init(); } } protected function display($route, $_lang=array()) { $this->initView(); $this->view->display($route, $_lang); } protected function assign($name, $value='') { if(is_array($name)) { $this->var = array_merge($this->var, $name); }else { $this->var[$name] = $value; } } private function initView(){ if(!$this->view) $this->view = C('view'); if($this->var) $this->view->assign($this->var); } }